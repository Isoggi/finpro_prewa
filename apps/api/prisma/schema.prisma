generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Address {
  id          Int          @id @default(autoincrement())
  lng         Float
  lat         Float
  province_id Int
  provinces   Provinces    @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_ibfk_1")
  district_id Int
  district    District     @relation(fields: [district_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "address_ibfk_2")
  properties  Properties[]

  detail String? @db.VarChar(255)

  @@index([district_id], map: "district_id")
  @@index([province_id], map: "province_id")
  @@map("address")
}

model District {
  id          Int       @id @default(autoincrement())
  province_id Int
  name        String    @db.VarChar(255)
  address     Address[]
  province    Provinces @relation(fields: [province_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "district_ibfk_1")

  @@index([province_id], map: "province_id")
  @@map("district")
}

model Properties {
  id           Int      @id @default(autoincrement())
  tenant_id    Int
  name         String   @db.VarChar(255)
  description  String?  @db.Text
  category_id  Int
  address_id   Int
  slug_address String?  @unique @db.VarChar(255)
  image        String?  @db.VarChar(255)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  isActive     Boolean  @default(true)

  category Categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_ibfk_1")
  tenant   Users      @relation(fields: [tenant_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_ibfk_2")
  address  Address    @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_ibfk_3")
  reviews  Reviews[]
  rooms    Rooms[]

  @@index([address_id], map: "address_id")
  @@index([category_id], map: "category_id")
  @@index([tenant_id], map: "tenant_id")
  @@map("properties")
}

model Categories {
  id         Int          @id @default(autoincrement())
  name       String       @db.VarChar(255)
  created_at DateTime     @default(now())
  updated_at DateTime     @updatedAt
  properties Properties[]

  @@map("properties_categories")
}

model Rooms {
  id          Int      @id @default(autoincrement())
  property_id Int
  name        String   @db.VarChar(255)
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 0)
  capacity    Int
  image       String?  @db.VarChar(255)
  slug        String   @unique @db.VarChar(255)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  isActive    Boolean  @default(true)

  property       Properties         @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_rooms_ibfk_1")
  transaction    TransactionItems[]
  available      Availability[]
  peakSeasonRate PeakSeasonRate[]

  @@index([property_id], map: "property_id")
  @@map("properties_rooms")
}

model Availability {
  id         Int      @id @default(autoincrement())
  room_id    Int
  stock      Int
  date       DateTime @db.Date
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  isCanceled Boolean  @default(false)
  rooms      Rooms    @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_rooms_availability_ibfk_1")

  @@index([room_id], map: "room_id")
  @@map("properties_rooms_availability")
}

model PeakSeasonRate {
  id           Int                                           @id @default(autoincrement())
  room_id      Int
  start_date   DateTime                                      @db.Date
  end_date     DateTime                                      @db.Date
  rates        Int
  rateCategory properties_rooms_peakseasonrate_rateCategory?
  rooms        Rooms                                         @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "properties_rooms_peakseasonrate_ibfk_1")

  @@index([room_id], map: "room_id")
  @@map("properties_rooms_peakseasonrate")
}

model Provinces {
  id       Int        @id @default(autoincrement())
  name     String     @db.VarChar(255)
  address  Address[]
  district District[]

  @@map("province")
}

model Reviews {
  id                  Int                   @id @default(autoincrement())
  user_id             Int
  property_id         Int
  rating              Int?
  comment             String?               @db.Text
  prev_review_id      Int?
  created_at          DateTime              @default(now())
  updated_at          DateTime              @updatedAt
  user                Users                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_1")
  property            Properties            @relation(fields: [property_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "reviews_ibfk_2")
  Transactions_Review Transactions_Review[]

  @@index([property_id], map: "property_id")
  @@index([user_id], map: "user_id")
  @@map("reviews")
}

model Tenants {
  id            Int                 @id
  bankAccount   tenants_bankAccount
  accountNumber String              @db.VarChar(255)
  phone_number  String?             @db.VarChar(255)
  Users         Users[]

  @@map("tenants")
}

model TransactionItems {
  id             Int                      @id @default(autoincrement())
  transaction_id Int
  room_id        Int
  start_date     DateTime                 @db.DateTime(0)
  end_date       DateTime                 @db.DateTime(0)
  total_price    Decimal                  @db.Decimal(10, 0)
  status         transaction_items_status
  created_at     DateTime                 @default(now())
  updated_at     DateTime                 @updatedAt

  transaction Transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactionitems_ibfk_1")
  room        Rooms        @relation(fields: [room_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transactionitems_ibfk_2")

  @@index([room_id], map: "room_id")
  @@index([transaction_id], map: "transaction_id")
  @@map("transaction_items")
}

model Transactions {
  id             Int                         @id @default(autoincrement())
  invoice_number String?                     @db.VarChar(255)
  user_id        Int
  amount         Decimal                     @db.Decimal(10, 0)
  payment_method transactions_payment_method
  payment_proof  String?                     @db.VarChar(255)
  status         transactions_status
  created_at     DateTime                    @default(now())
  updated_at     DateTime                    @updatedAt
  payment_expire DateTime?

  user Users @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_ibfk_1")

  transactionItems    TransactionItems[]
  Transactions_Review Transactions_Review[]

  @@index([user_id], map: "user_id")
  @@map("transactions")
}

model Transactions_Review {
  id             Int          @id @default(autoincrement())
  transaction_id Int
  review_id      Int
  review         Reviews      @relation(fields: [review_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_review_ibfk_1")
  transaction    Transactions @relation(fields: [transaction_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "transaction_review_ibfk_2")

  @@index([review_id], map: "review_id")
  @@index([transaction_id], map: "transaction_id")
  @@map("transactions_reviews")
}

model Users {
  id                    Int        @id @default(autoincrement())
  email                 String     @unique(map: "email") @db.VarChar(255)
  password              String?    @db.VarChar(255)
  role                  users_role
  name                  String     @db.VarChar(255)
  phone_number          String     @db.VarChar(255)
  isVerified            Boolean    @default(false)
  created_at            DateTime   @default(now())
  updated_at            DateTime   @updatedAt
  verified_at           DateTime?  @db.DateTime
  forget_password_token String?    @db.Text
  image                 String?    @db.VarChar(255)

  oauth_id       String? @db.VarChar(255)
  oauth_provider String? @db.VarChar(255)

  tenant       Tenants[]
  transactions Transactions[]
  properties   Properties[]
  reviews      Reviews[]

  @@map("users")
}

enum tenants_bankAccount {
  BCA
  Mandiri
  BRI
  BNI
  BankJago
  Jenius
}

enum transactions_payment_method {
  manual
  doku
  midtrans
  other
}

enum users_role {
  user
  tenant
}

enum transactions_status {
  pending
  completed
  failed
  waitingpayment
  waitingapproval
  cancelled
}

enum properties_rooms_peakseasonrate_rateCategory {
  every
  once
}

enum transaction_items_status {
  waitingpayment
  confirmed
  cancelled
}
